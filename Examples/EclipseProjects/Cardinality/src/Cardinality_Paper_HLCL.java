//Java imports
import java.util.HashMap;
import java.util.List;
//imports for hlcl 
import com.variamos.hlcl.core.HlclProgram; 
import com.variamos.hlcl.model.expressions.HlclFactory; 
import com.variamos.hlcl.model.domains.BinaryDomain;
import com.variamos.hlcl.model.domains.IntervalDomain;
import com.variamos.hlcl.model.domains.RangeDomain;
import com.variamos.hlcl.model.domains.StringDomain;
import com.variamos.hlcl.model.expressions.Identifier;
import com.variamos.hlcl.model.expressions.IntBooleanExpression;
import com.variamos.hlcl.model.expressions.NumericIdentifier;
import com.variamos.hlcl.model.expressions.SymbolicExpression;
import com.variamos.hlcl.model.expressions.IntNumericExpression;

//imports for solver
import com.variamos.solver.core.SWIPrologSolver;
import com.variamos.solver.core.compiler.Hlcl2SWIProlog;
import com.variamos.solver.model.SolverSolution;

/**
* This class is automatically generated from a product line model described in 
* constraint programming HLCL
* @author Angela Villota 
* @version CP-HLCL Version1
*
*/
public class Cardinality_Paper_HLCL { 			
	
	private String modelName;
	private HlclFactory factory;
	private HlclProgram hlclProgram;
	private SWIPrologSolver swiSolver;
	private String prologProgram;
	private HashMap<String,IntBooleanExpression> constraints;
	private HashMap<String,Identifier> variables;
	private HashMap<String,NumericIdentifier> numbers;
	/**
	* This is an autogenerated method* Constructor method
	* @param modelName is the name of the model in the  CP-HLCL specification
	*/
	public Cardinality_Paper_HLCL(String modelName){ 				
		
		this.modelName= modelName;
		hlclProgram= new HlclProgram();
		factory = new HlclFactory();
		variables= new HashMap<String,Identifier>();
		constraints= new HashMap<String,IntBooleanExpression>();
		numbers= new HashMap<String,NumericIdentifier>();
		NumericIdentifier one = factory.number(1);
		NumericIdentifier zero= factory.number(0);
		numbers.put("1", one);
		numbers.put("0", zero);
	} 			
	public static void main(String[] args) {
		Cardinality_Paper_HLCL obj = new Cardinality_Paper_HLCL("Cardinality_Paper_HLCL");
		obj.run();
	}
	public void run(){
		// first obtain a HlclProgram from the specification
		transformVars();
		transformConstraints(); 
		// use the solver to solve the constraint program
		evaluateSatisfiability();
		//show the output
		System.out.println(prologProgram);
	}
	public void transformVars() {
//declaring variable A
Identifier A = factory.newIdentifier("A");
  			BinaryDomain ADom= new BinaryDomain();
A.setDomain(ADom);	
variables.put("A", A); //including the variable in the map
//declaring variable B
Identifier B = factory.newIdentifier("B");
  			BinaryDomain BDom= new BinaryDomain();
B.setDomain(BDom);	
variables.put("B", B); //including the variable in the map
//declaring variable D
Identifier D = factory.newIdentifier("D");
  			BinaryDomain DDom= new BinaryDomain();
D.setDomain(DDom);	
variables.put("D", D); //including the variable in the map
//declaring variable E
Identifier E = factory.newIdentifier("E");
  			BinaryDomain EDom= new BinaryDomain();
E.setDomain(EDom);	
variables.put("E", E); //including the variable in the map
//declaring variable A1
Identifier A1 = factory.newIdentifier("A1");
  			BinaryDomain A1Dom= new BinaryDomain();
A1.setDomain(A1Dom);	
variables.put("A1", A1); //including the variable in the map
//declaring variable A_card
Identifier A_card = factory.newIdentifier("A_card");
 				RangeDomain A_cardDom= new RangeDomain(0, 1);
A_card.setDomain(A_cardDom);	
variables.put("A_card", A_card); //including the variable in the map
//declaring variable A1_B1
Identifier A1_B1 = factory.newIdentifier("A1_B1");
  			BinaryDomain A1_B1Dom= new BinaryDomain();
A1_B1.setDomain(A1_B1Dom);	
variables.put("A1_B1", A1_B1); //including the variable in the map
//declaring variable A1_B2
Identifier A1_B2 = factory.newIdentifier("A1_B2");
  			BinaryDomain A1_B2Dom= new BinaryDomain();
A1_B2.setDomain(A1_B2Dom);	
variables.put("A1_B2", A1_B2); //including the variable in the map
//declaring variable B_card
Identifier B_card = factory.newIdentifier("B_card");
 				RangeDomain B_cardDom= new RangeDomain(0, 2);
B_card.setDomain(B_cardDom);	
variables.put("B_card", B_card); //including the variable in the map
//declaring variable A1_B1_D1
Identifier A1_B1_D1 = factory.newIdentifier("A1_B1_D1");
  			BinaryDomain A1_B1_D1Dom= new BinaryDomain();
A1_B1_D1.setDomain(A1_B1_D1Dom);	
variables.put("A1_B1_D1", A1_B1_D1); //including the variable in the map
//declaring variable A1_B1_D2
Identifier A1_B1_D2 = factory.newIdentifier("A1_B1_D2");
  			BinaryDomain A1_B1_D2Dom= new BinaryDomain();
A1_B1_D2.setDomain(A1_B1_D2Dom);	
variables.put("A1_B1_D2", A1_B1_D2); //including the variable in the map
//declaring variable A1_B2_D1
Identifier A1_B2_D1 = factory.newIdentifier("A1_B2_D1");
  			BinaryDomain A1_B2_D1Dom= new BinaryDomain();
A1_B2_D1.setDomain(A1_B2_D1Dom);	
variables.put("A1_B2_D1", A1_B2_D1); //including the variable in the map
//declaring variable A1_B2_D2
Identifier A1_B2_D2 = factory.newIdentifier("A1_B2_D2");
  			BinaryDomain A1_B2_D2Dom= new BinaryDomain();
A1_B2_D2.setDomain(A1_B2_D2Dom);	
variables.put("A1_B2_D2", A1_B2_D2); //including the variable in the map
//declaring variable D_card
Identifier D_card = factory.newIdentifier("D_card");
 				RangeDomain D_cardDom= new RangeDomain(0, 4);
D_card.setDomain(D_cardDom);	
variables.put("D_card", D_card); //including the variable in the map
//declaring variable A1_B1_D1_E1
Identifier A1_B1_D1_E1 = factory.newIdentifier("A1_B1_D1_E1");
  			BinaryDomain A1_B1_D1_E1Dom= new BinaryDomain();
A1_B1_D1_E1.setDomain(A1_B1_D1_E1Dom);	
variables.put("A1_B1_D1_E1", A1_B1_D1_E1); //including the variable in the map
//declaring variable A1_B1_D1_E2
Identifier A1_B1_D1_E2 = factory.newIdentifier("A1_B1_D1_E2");
  			BinaryDomain A1_B1_D1_E2Dom= new BinaryDomain();
A1_B1_D1_E2.setDomain(A1_B1_D1_E2Dom);	
variables.put("A1_B1_D1_E2", A1_B1_D1_E2); //including the variable in the map
//declaring variable A1_B1_D2_E1
Identifier A1_B1_D2_E1 = factory.newIdentifier("A1_B1_D2_E1");
  			BinaryDomain A1_B1_D2_E1Dom= new BinaryDomain();
A1_B1_D2_E1.setDomain(A1_B1_D2_E1Dom);	
variables.put("A1_B1_D2_E1", A1_B1_D2_E1); //including the variable in the map
//declaring variable A1_B1_D2_E2
Identifier A1_B1_D2_E2 = factory.newIdentifier("A1_B1_D2_E2");
  			BinaryDomain A1_B1_D2_E2Dom= new BinaryDomain();
A1_B1_D2_E2.setDomain(A1_B1_D2_E2Dom);	
variables.put("A1_B1_D2_E2", A1_B1_D2_E2); //including the variable in the map
//declaring variable A1_B2_D1_E1
Identifier A1_B2_D1_E1 = factory.newIdentifier("A1_B2_D1_E1");
  			BinaryDomain A1_B2_D1_E1Dom= new BinaryDomain();
A1_B2_D1_E1.setDomain(A1_B2_D1_E1Dom);	
variables.put("A1_B2_D1_E1", A1_B2_D1_E1); //including the variable in the map
//declaring variable A1_B2_D1_E2
Identifier A1_B2_D1_E2 = factory.newIdentifier("A1_B2_D1_E2");
  			BinaryDomain A1_B2_D1_E2Dom= new BinaryDomain();
A1_B2_D1_E2.setDomain(A1_B2_D1_E2Dom);	
variables.put("A1_B2_D1_E2", A1_B2_D1_E2); //including the variable in the map
//declaring variable A1_B2_D2_E1
Identifier A1_B2_D2_E1 = factory.newIdentifier("A1_B2_D2_E1");
  			BinaryDomain A1_B2_D2_E1Dom= new BinaryDomain();
A1_B2_D2_E1.setDomain(A1_B2_D2_E1Dom);	
variables.put("A1_B2_D2_E1", A1_B2_D2_E1); //including the variable in the map
//declaring variable A1_B2_D2_E2
Identifier A1_B2_D2_E2 = factory.newIdentifier("A1_B2_D2_E2");
  			BinaryDomain A1_B2_D2_E2Dom= new BinaryDomain();
A1_B2_D2_E2.setDomain(A1_B2_D2_E2Dom);	
variables.put("A1_B2_D2_E2", A1_B2_D2_E2); //including the variable in the map
//declaring variable E_card
Identifier E_card = factory.newIdentifier("E_card");
 				RangeDomain E_cardDom= new RangeDomain(0, 8);
E_card.setDomain(E_cardDom);	
variables.put("E_card", E_card); //including the variable in the map
	}
	public void transformConstraints() {
//
//declaring constraint c0


Identifier c0_left = variables.get("A");

NumericIdentifier c0_right = getValue("1");
IntBooleanExpression c0=
factory.equals(c0_left, c0_right);
constraints.put("c0", c0);
hlclProgram.add(c0);
//
//declaring constraint c1


Identifier c1_left = variables.get("A");

Identifier c1_right = variables.get("B");
IntBooleanExpression c1=
factory.equals(c1_left, c1_right);
constraints.put("c1", c1);
hlclProgram.add(c1);
//
//declaring constraint c3


Identifier c3_left = variables.get("B");

Identifier c3_right = variables.get("D");
IntBooleanExpression c3=
factory.equals(c3_left, c3_right);
constraints.put("c3", c3);
hlclProgram.add(c3);
//
//declaring constraint c4


Identifier c4_left = variables.get("D");

Identifier c4_right = variables.get("E");
IntBooleanExpression c4=
factory.equals(c4_left, c4_right);
constraints.put("c4", c4);
hlclProgram.add(c4);
//
//declaring constraint c5


Identifier c5_left = variables.get("A_card");

Identifier c5_right = variables.get("A1");
IntBooleanExpression c5=
factory.equals(c5_left, c5_right);
constraints.put("c5", c5);
hlclProgram.add(c5);
//
//declaring constraint c6


NumericIdentifier c6_left = getValue("1");

Identifier c6_right = variables.get("A1");
IntBooleanExpression c6=
factory.lessOrEqualsThan(c6_left, c6_right);
constraints.put("c6", c6);
hlclProgram.add(c6);
//
//declaring constraint c7


Identifier c7_left = variables.get("A1");

NumericIdentifier c7_right = getValue("1");
IntBooleanExpression c7=
factory.lessOrEqualsThan(c7_left, c7_right);
constraints.put("c7", c7);
hlclProgram.add(c7);
//
//declaring constraint c8


Identifier c8_left = variables.get("A");


Identifier c8_right_left = variables.get("A_card");

NumericIdentifier c8_right_right = getValue("0");
IntBooleanExpression c8_right=
factory.greaterThan(c8_right_left, c8_right_right);
IntBooleanExpression c8=factory.doubleImplies(c8_left, c8_right);		
constraints.put("c8", c8);
hlclProgram.add(c8);
//
//declaring constraint c9


Identifier c9_left = variables.get("B_card");


Identifier c9_right_left = variables.get("A1_B1");

Identifier c9_right_right = variables.get("A1_B2");
IntNumericExpression c9_right=factory.sum(c9_right_left, c9_right_right);	
IntBooleanExpression c9=
factory.equals(c9_left, c9_right);
constraints.put("c9", c9);
hlclProgram.add(c9);
//
//declaring constraint c10


NumericIdentifier c10_left = getValue("1");


Identifier c10_right_left = variables.get("A1_B1");

Identifier c10_right_right = variables.get("A1_B2");
IntNumericExpression c10_right=factory.sum(c10_right_left, c10_right_right);	
IntBooleanExpression c10=
factory.lessOrEqualsThan(c10_left, c10_right);
constraints.put("c10", c10);
hlclProgram.add(c10);
//
//declaring constraint c11



Identifier c11_left_left = variables.get("A1_B1");

Identifier c11_left_right = variables.get("A1_B2");
IntNumericExpression c11_left=factory.sum(c11_left_left, c11_left_right);	

NumericIdentifier c11_right = getValue("2");
IntBooleanExpression c11=
factory.lessOrEqualsThan(c11_left, c11_right);
constraints.put("c11", c11);
hlclProgram.add(c11);
//
//declaring constraint c12


Identifier c12_left = variables.get("B");


Identifier c12_right_left = variables.get("B_card");

NumericIdentifier c12_right_right = getValue("0");
IntBooleanExpression c12_right=
factory.greaterThan(c12_right_left, c12_right_right);
IntBooleanExpression c12=factory.doubleImplies(c12_left, c12_right);		
constraints.put("c12", c12);
hlclProgram.add(c12);
//
//declaring constraint c17


Identifier c17_left = variables.get("D_card");




Identifier c17_right_left_left_left = variables.get("A1_B1_D1");

Identifier c17_right_left_left_right = variables.get("A1_B1_D2");
IntNumericExpression c17_right_left_left=factory.sum(c17_right_left_left_left, c17_right_left_left_right);	

Identifier c17_right_left_right = variables.get("A1_B2_D1");
IntNumericExpression c17_right_left=factory.sum(c17_right_left_left, c17_right_left_right);	

Identifier c17_right_right = variables.get("A1_B2_D2");
IntNumericExpression c17_right=factory.sum(c17_right_left, c17_right_right);	
IntBooleanExpression c17=
factory.equals(c17_left, c17_right);
constraints.put("c17", c17);
hlclProgram.add(c17);
//
//declaring constraint c18


NumericIdentifier c18_left = getValue("1");




Identifier c18_right_left_left_left = variables.get("A1_B1_D1");

Identifier c18_right_left_left_right = variables.get("A1_B1_D2");
IntNumericExpression c18_right_left_left=factory.sum(c18_right_left_left_left, c18_right_left_left_right);	

Identifier c18_right_left_right = variables.get("A1_B2_D1");
IntNumericExpression c18_right_left=factory.sum(c18_right_left_left, c18_right_left_right);	

Identifier c18_right_right = variables.get("A1_B2_D2");
IntNumericExpression c18_right=factory.sum(c18_right_left, c18_right_right);	
IntBooleanExpression c18=
factory.lessOrEqualsThan(c18_left, c18_right);
constraints.put("c18", c18);
hlclProgram.add(c18);
//
//declaring constraint c19





Identifier c19_left_left_left_left = variables.get("A1_B1_D1");

Identifier c19_left_left_left_right = variables.get("A1_B1_D2");
IntNumericExpression c19_left_left_left=factory.sum(c19_left_left_left_left, c19_left_left_left_right);	

Identifier c19_left_left_right = variables.get("A1_B2_D1");
IntNumericExpression c19_left_left=factory.sum(c19_left_left_left, c19_left_left_right);	

Identifier c19_left_right = variables.get("A1_B2_D2");
IntNumericExpression c19_left=factory.sum(c19_left_left, c19_left_right);	

NumericIdentifier c19_right = getValue("4");
IntBooleanExpression c19=
factory.lessOrEqualsThan(c19_left, c19_right);
constraints.put("c19", c19);
hlclProgram.add(c19);
//
//declaring constraint c20


Identifier c20_left = variables.get("D");


Identifier c20_right_left = variables.get("D_card");

NumericIdentifier c20_right_right = getValue("0");
IntBooleanExpression c20_right=
factory.greaterThan(c20_right_left, c20_right_right);
IntBooleanExpression c20=factory.doubleImplies(c20_left, c20_right);		
constraints.put("c20", c20);
hlclProgram.add(c20);
//
//declaring constraint c20_1


Identifier c20_1_left = variables.get("A1_B1");



NumericIdentifier c20_1_right_left_left = getValue("1");


Identifier c20_1_right_left_right_left = variables.get("A1_B1_D1");

Identifier c20_1_right_left_right_right = variables.get("A1_B1_D2");
IntNumericExpression c20_1_right_left_right=factory.sum(c20_1_right_left_right_left, c20_1_right_left_right_right);	
IntBooleanExpression c20_1_right_left=
factory.lessOrEqualsThan(c20_1_right_left_left, c20_1_right_left_right);



Identifier c20_1_right_right_left_left = variables.get("A1_B1_D1");

Identifier c20_1_right_right_left_right = variables.get("A1_B1_D2");
IntNumericExpression c20_1_right_right_left=factory.sum(c20_1_right_right_left_left, c20_1_right_right_left_right);	

NumericIdentifier c20_1_right_right_right = getValue("2");
IntBooleanExpression c20_1_right_right=
factory.lessOrEqualsThan(c20_1_right_right_left, c20_1_right_right_right);
IntBooleanExpression c20_1_right=factory.and(c20_1_right_left, c20_1_right_right);		
IntBooleanExpression c20_1=factory.doubleImplies(c20_1_left, c20_1_right);		
constraints.put("c20_1", c20_1);
hlclProgram.add(c20_1);
//
//declaring constraint c20_2


Identifier c20_2_left = variables.get("A1_B2");



NumericIdentifier c20_2_right_left_left = getValue("1");


Identifier c20_2_right_left_right_left = variables.get("A1_B2_D1");

Identifier c20_2_right_left_right_right = variables.get("A1_B2_D2");
IntNumericExpression c20_2_right_left_right=factory.sum(c20_2_right_left_right_left, c20_2_right_left_right_right);	
IntBooleanExpression c20_2_right_left=
factory.lessOrEqualsThan(c20_2_right_left_left, c20_2_right_left_right);



Identifier c20_2_right_right_left_left = variables.get("A1_B2_D1");

Identifier c20_2_right_right_left_right = variables.get("A1_B2_D2");
IntNumericExpression c20_2_right_right_left=factory.sum(c20_2_right_right_left_left, c20_2_right_right_left_right);	

NumericIdentifier c20_2_right_right_right = getValue("2");
IntBooleanExpression c20_2_right_right=
factory.lessOrEqualsThan(c20_2_right_right_left, c20_2_right_right_right);
IntBooleanExpression c20_2_right=factory.and(c20_2_right_left, c20_2_right_right);		
IntBooleanExpression c20_2=factory.doubleImplies(c20_2_left, c20_2_right);		
constraints.put("c20_2", c20_2);
hlclProgram.add(c20_2);
//
//declaring constraint c21


Identifier c21_left = variables.get("E_card");








Identifier c21_right_left_left_left_left_left_left_left = variables.get("A1_B1_D1_E1");

Identifier c21_right_left_left_left_left_left_left_right = variables.get("A1_B1_D1_E2");
IntNumericExpression c21_right_left_left_left_left_left_left=factory.sum(c21_right_left_left_left_left_left_left_left, c21_right_left_left_left_left_left_left_right);	

Identifier c21_right_left_left_left_left_left_right = variables.get("A1_B1_D2_E1");
IntNumericExpression c21_right_left_left_left_left_left=factory.sum(c21_right_left_left_left_left_left_left, c21_right_left_left_left_left_left_right);	

Identifier c21_right_left_left_left_left_right = variables.get("A1_B1_D2_E2");
IntNumericExpression c21_right_left_left_left_left=factory.sum(c21_right_left_left_left_left_left, c21_right_left_left_left_left_right);	

Identifier c21_right_left_left_left_right = variables.get("A1_B2_D1_E1");
IntNumericExpression c21_right_left_left_left=factory.sum(c21_right_left_left_left_left, c21_right_left_left_left_right);	

Identifier c21_right_left_left_right = variables.get("A1_B2_D1_E2");
IntNumericExpression c21_right_left_left=factory.sum(c21_right_left_left_left, c21_right_left_left_right);	

Identifier c21_right_left_right = variables.get("A1_B2_D2_E1");
IntNumericExpression c21_right_left=factory.sum(c21_right_left_left, c21_right_left_right);	

Identifier c21_right_right = variables.get("A1_B2_D2_E2");
IntNumericExpression c21_right=factory.sum(c21_right_left, c21_right_right);	
IntBooleanExpression c21=
factory.equals(c21_left, c21_right);
constraints.put("c21", c21);
hlclProgram.add(c21);
//
//declaring constraint c22


NumericIdentifier c22_left = getValue("1");








Identifier c22_right_left_left_left_left_left_left_left = variables.get("A1_B1_D1_E1");

Identifier c22_right_left_left_left_left_left_left_right = variables.get("A1_B1_D1_E2");
IntNumericExpression c22_right_left_left_left_left_left_left=factory.sum(c22_right_left_left_left_left_left_left_left, c22_right_left_left_left_left_left_left_right);	

Identifier c22_right_left_left_left_left_left_right = variables.get("A1_B1_D2_E1");
IntNumericExpression c22_right_left_left_left_left_left=factory.sum(c22_right_left_left_left_left_left_left, c22_right_left_left_left_left_left_right);	

Identifier c22_right_left_left_left_left_right = variables.get("A1_B1_D2_E2");
IntNumericExpression c22_right_left_left_left_left=factory.sum(c22_right_left_left_left_left_left, c22_right_left_left_left_left_right);	

Identifier c22_right_left_left_left_right = variables.get("A1_B2_D1_E1");
IntNumericExpression c22_right_left_left_left=factory.sum(c22_right_left_left_left_left, c22_right_left_left_left_right);	

Identifier c22_right_left_left_right = variables.get("A1_B2_D1_E2");
IntNumericExpression c22_right_left_left=factory.sum(c22_right_left_left_left, c22_right_left_left_right);	

Identifier c22_right_left_right = variables.get("A1_B2_D2_E1");
IntNumericExpression c22_right_left=factory.sum(c22_right_left_left, c22_right_left_right);	

Identifier c22_right_right = variables.get("A1_B2_D2_E2");
IntNumericExpression c22_right=factory.sum(c22_right_left, c22_right_right);	
IntBooleanExpression c22=
factory.lessOrEqualsThan(c22_left, c22_right);
constraints.put("c22", c22);
hlclProgram.add(c22);
//
//declaring constraint c23









Identifier c23_left_left_left_left_left_left_left_left = variables.get("A1_B1_D1_E1");

Identifier c23_left_left_left_left_left_left_left_right = variables.get("A1_B1_D1_E2");
IntNumericExpression c23_left_left_left_left_left_left_left=factory.sum(c23_left_left_left_left_left_left_left_left, c23_left_left_left_left_left_left_left_right);	

Identifier c23_left_left_left_left_left_left_right = variables.get("A1_B1_D2_E1");
IntNumericExpression c23_left_left_left_left_left_left=factory.sum(c23_left_left_left_left_left_left_left, c23_left_left_left_left_left_left_right);	

Identifier c23_left_left_left_left_left_right = variables.get("A1_B1_D2_E2");
IntNumericExpression c23_left_left_left_left_left=factory.sum(c23_left_left_left_left_left_left, c23_left_left_left_left_left_right);	

Identifier c23_left_left_left_left_right = variables.get("A1_B2_D1_E1");
IntNumericExpression c23_left_left_left_left=factory.sum(c23_left_left_left_left_left, c23_left_left_left_left_right);	

Identifier c23_left_left_left_right = variables.get("A1_B2_D1_E2");
IntNumericExpression c23_left_left_left=factory.sum(c23_left_left_left_left, c23_left_left_left_right);	

Identifier c23_left_left_right = variables.get("A1_B2_D2_E1");
IntNumericExpression c23_left_left=factory.sum(c23_left_left_left, c23_left_left_right);	

Identifier c23_left_right = variables.get("A1_B2_D2_E2");
IntNumericExpression c23_left=factory.sum(c23_left_left, c23_left_right);	

NumericIdentifier c23_right = getValue("8");
IntBooleanExpression c23=
factory.lessOrEqualsThan(c23_left, c23_right);
constraints.put("c23", c23);
hlclProgram.add(c23);
//
//declaring constraint c24


Identifier c24_left = variables.get("E");


Identifier c24_right_left = variables.get("E_card");

NumericIdentifier c24_right_right = getValue("0");
IntBooleanExpression c24_right=
factory.greaterThan(c24_right_left, c24_right_right);
IntBooleanExpression c24=factory.doubleImplies(c24_left, c24_right);		
constraints.put("c24", c24);
hlclProgram.add(c24);
//
//declaring constraint c25


Identifier c25_left = variables.get("A1_B1_D1");



NumericIdentifier c25_right_left_left = getValue("1");


Identifier c25_right_left_right_left = variables.get("A1_B1_D1_E1");

Identifier c25_right_left_right_right = variables.get("A1_B1_D1_E2");
IntNumericExpression c25_right_left_right=factory.sum(c25_right_left_right_left, c25_right_left_right_right);	
IntBooleanExpression c25_right_left=
factory.lessOrEqualsThan(c25_right_left_left, c25_right_left_right);



Identifier c25_right_right_left_left = variables.get("A1_B1_D1_E1");

Identifier c25_right_right_left_right = variables.get("A1_B1_D1_E2");
IntNumericExpression c25_right_right_left=factory.sum(c25_right_right_left_left, c25_right_right_left_right);	

NumericIdentifier c25_right_right_right = getValue("2");
IntBooleanExpression c25_right_right=
factory.lessOrEqualsThan(c25_right_right_left, c25_right_right_right);
IntBooleanExpression c25_right=factory.and(c25_right_left, c25_right_right);		
IntBooleanExpression c25=factory.doubleImplies(c25_left, c25_right);		
constraints.put("c25", c25);
hlclProgram.add(c25);
//
//declaring constraint c26


Identifier c26_left = variables.get("A1_B1_D2");



NumericIdentifier c26_right_left_left = getValue("1");


Identifier c26_right_left_right_left = variables.get("A1_B1_D2_E1");

Identifier c26_right_left_right_right = variables.get("A1_B1_D2_E2");
IntNumericExpression c26_right_left_right=factory.sum(c26_right_left_right_left, c26_right_left_right_right);	
IntBooleanExpression c26_right_left=
factory.lessOrEqualsThan(c26_right_left_left, c26_right_left_right);



Identifier c26_right_right_left_left = variables.get("A1_B1_D2_E1");

Identifier c26_right_right_left_right = variables.get("A1_B1_D2_E2");
IntNumericExpression c26_right_right_left=factory.sum(c26_right_right_left_left, c26_right_right_left_right);	

NumericIdentifier c26_right_right_right = getValue("2");
IntBooleanExpression c26_right_right=
factory.lessOrEqualsThan(c26_right_right_left, c26_right_right_right);
IntBooleanExpression c26_right=factory.and(c26_right_left, c26_right_right);		
IntBooleanExpression c26=factory.doubleImplies(c26_left, c26_right);		
constraints.put("c26", c26);
hlclProgram.add(c26);
//
//declaring constraint c27


Identifier c27_left = variables.get("A1_B2_D1");



NumericIdentifier c27_right_left_left = getValue("1");


Identifier c27_right_left_right_left = variables.get("A1_B2_D1_E1");

Identifier c27_right_left_right_right = variables.get("A1_B2_D1_E2");
IntNumericExpression c27_right_left_right=factory.sum(c27_right_left_right_left, c27_right_left_right_right);	
IntBooleanExpression c27_right_left=
factory.lessOrEqualsThan(c27_right_left_left, c27_right_left_right);



Identifier c27_right_right_left_left = variables.get("A1_B2_D1_E1");

Identifier c27_right_right_left_right = variables.get("A1_B2_D1_E2");
IntNumericExpression c27_right_right_left=factory.sum(c27_right_right_left_left, c27_right_right_left_right);	

NumericIdentifier c27_right_right_right = getValue("2");
IntBooleanExpression c27_right_right=
factory.lessOrEqualsThan(c27_right_right_left, c27_right_right_right);
IntBooleanExpression c27_right=factory.and(c27_right_left, c27_right_right);		
IntBooleanExpression c27=factory.doubleImplies(c27_left, c27_right);		
constraints.put("c27", c27);
hlclProgram.add(c27);
//
//declaring constraint c28


Identifier c28_left = variables.get("A1_B2_D2");



NumericIdentifier c28_right_left_left = getValue("1");


Identifier c28_right_left_right_left = variables.get("A1_B2_D2_E1");

Identifier c28_right_left_right_right = variables.get("A1_B2_D2_E2");
IntNumericExpression c28_right_left_right=factory.sum(c28_right_left_right_left, c28_right_left_right_right);	
IntBooleanExpression c28_right_left=
factory.lessOrEqualsThan(c28_right_left_left, c28_right_left_right);



Identifier c28_right_right_left_left = variables.get("A1_B2_D2_E1");

Identifier c28_right_right_left_right = variables.get("A1_B2_D2_E2");
IntNumericExpression c28_right_right_left=factory.sum(c28_right_right_left_left, c28_right_right_left_right);	

NumericIdentifier c28_right_right_right = getValue("2");
IntBooleanExpression c28_right_right=
factory.lessOrEqualsThan(c28_right_right_left, c28_right_right_right);
IntBooleanExpression c28_right=factory.and(c28_right_left, c28_right_right);		
IntBooleanExpression c28=factory.doubleImplies(c28_left, c28_right);		
constraints.put("c28", c28);
hlclProgram.add(c28);
	}
	public boolean evaluateSatisfiability(){
		// the output
		boolean evaluation= false;
		// //to transform the hllcl program into a prolog  file, 
		// //these lines are commented because they are useful for debugging 
		Hlcl2SWIProlog swiPrologTransformer = new Hlcl2SWIProlog(); 
		prologProgram = swiPrologTransformer.transform(hlclProgram);
				
		// an instance of the solver for Swiprolog 
		swiSolver= new SWIPrologSolver();
		swiSolver.setHLCLProgram(hlclProgram); //passing the hlcl program to the solver
		swiSolver.solve(); // This methhod prepares the solver 
		List<SolverSolution> solutions = swiSolver.getAllSolutions(); // Consulting if the solver has one solution
			evaluation= solutions.size()>0;
			for (SolverSolution solverSolution : solutions) {
				System.out.println(solverSolution.toString());
			}	return evaluation;
	}
	/** 
	* To obtain the NumericIdentifier representation of a value 
	* @param id the string with the value 
	* @return the NumericIdentifier 
	*/
	public NumericIdentifier getValue(String id) {	NumericIdentifier value= numbers.get(id); 
	 	if (value==null) { 
	 		if (id.equals("selected")) { 
	 			value= numbers.get("1"); 
	 		} 
	 		else if(id.equals("unselected")) {
				value= numbers.get("0"); 
			} 
			else { 
				value= factory.number(Integer.parseInt(id)); 
				numbers.put(id, value);
			}
	 	} 
	 	return value; 
	 } 
		public String getModelName() {
			return modelName;
		}
		public void setModelName(String modelName) {
			this.modelName = modelName;
		}
		public HlclFactory getFactory() {
			return factory;
		}
		public void setFactory(HlclFactory factory) {
			this.factory = factory;
		}
		public HlclProgram getHlclProgram() {
			return hlclProgram;
		}
		public void setHlclProgram(HlclProgram hlclProgram) {
			this.hlclProgram = hlclProgram;
		}
} 	