//Java imports
import java.util.HashMap;
import java.util.List;
//imports for hlcl 
import com.variamos.hlcl.core.HlclProgram; 
import com.variamos.hlcl.model.expressions.HlclFactory; 
import com.variamos.hlcl.model.domains.BinaryDomain;
import com.variamos.hlcl.model.domains.IntervalDomain;
import com.variamos.hlcl.model.domains.RangeDomain;
import com.variamos.hlcl.model.domains.StringDomain;
import com.variamos.hlcl.model.expressions.Identifier;
import com.variamos.hlcl.model.expressions.IntBooleanExpression;
import com.variamos.hlcl.model.expressions.NumericIdentifier;
import com.variamos.hlcl.model.expressions.SymbolicExpression;
import com.variamos.hlcl.model.expressions.IntNumericExpression;

//imports for solver
import com.variamos.solver.core.SWIPrologSolver;
import com.variamos.solver.core.compiler.Hlcl2SWIProlog;
import com.variamos.solver.model.SolverSolution;

/**
* This class is automatically generated from a product line model described in 
* constraint programming HLCL
* @author Angela Villota 
* @version CP-HLCL Version1
*
*/
public class Ex3_Sousa { 			
	
	private String modelName;
	private HlclFactory factory;
	private HlclProgram hlclProgram;
	private SWIPrologSolver swiSolver;
	private String prologProgram;
	private HashMap<String,IntBooleanExpression> constraints;
	private HashMap<String,Identifier> variables;
	private HashMap<String,NumericIdentifier> numbers;
	/**
	* This is an autogenerated method* Constructor method
	* @param modelName is the name of the model in the  CP-HLCL specification
	*/
	public Ex3_Sousa(String modelName){ 				
		
		this.modelName= modelName;
		hlclProgram= new HlclProgram();
		factory = new HlclFactory();
		variables= new HashMap<String,Identifier>();
		constraints= new HashMap<String,IntBooleanExpression>();
		numbers= new HashMap<String,NumericIdentifier>();
		NumericIdentifier one = factory.number(1);
		NumericIdentifier zero= factory.number(0);
		numbers.put("1", one);
		numbers.put("0", zero);
	} 			
	public static void main(String[] args) {
		Ex3_Sousa obj = new Ex3_Sousa("Ex3_Sousa");
		obj.run();
	}
	public void run(){
		// first obtain a HlclProgram from the specification
		transformVars();
		transformConstraints(); 
		// use the solver to solve the constraint program
		evaluateSatisfiability();
		//show the output
		System.out.println(prologProgram);
	}
	public void transformVars() {
//declaring variable A
Identifier A = factory.newIdentifier("A");
  			BinaryDomain ADom= new BinaryDomain();
A.setDomain(ADom);	
variables.put("A", A); //including the variable in the map
//declaring variable B
Identifier B = factory.newIdentifier("B");
  			BinaryDomain BDom= new BinaryDomain();
B.setDomain(BDom);	
variables.put("B", B); //including the variable in the map
//declaring variable B_card
Identifier B_card = factory.newIdentifier("B_card");
 				RangeDomain B_cardDom= new RangeDomain(1, 2);
B_card.setDomain(B_cardDom);	
variables.put("B_card", B_card); //including the variable in the map
//declaring variable A_B1
Identifier A_B1 = factory.newIdentifier("A_B1");
  			BinaryDomain A_B1Dom= new BinaryDomain();
A_B1.setDomain(A_B1Dom);	
variables.put("A_B1", A_B1); //including the variable in the map
//declaring variable A_B2
Identifier A_B2 = factory.newIdentifier("A_B2");
  			BinaryDomain A_B2Dom= new BinaryDomain();
A_B2.setDomain(A_B2Dom);	
variables.put("A_B2", A_B2); //including the variable in the map
//declaring variable D
Identifier D = factory.newIdentifier("D");
  			BinaryDomain DDom= new BinaryDomain();
D.setDomain(DDom);	
variables.put("D", D); //including the variable in the map
//declaring variable D_card
Identifier D_card = factory.newIdentifier("D_card");
 				RangeDomain D_cardDom= new RangeDomain(1, 4);
D_card.setDomain(D_cardDom);	
variables.put("D_card", D_card); //including the variable in the map
//declaring variable A_B1_D1
Identifier A_B1_D1 = factory.newIdentifier("A_B1_D1");
  			BinaryDomain A_B1_D1Dom= new BinaryDomain();
A_B1_D1.setDomain(A_B1_D1Dom);	
variables.put("A_B1_D1", A_B1_D1); //including the variable in the map
//declaring variable A_B1_D2
Identifier A_B1_D2 = factory.newIdentifier("A_B1_D2");
  			BinaryDomain A_B1_D2Dom= new BinaryDomain();
A_B1_D2.setDomain(A_B1_D2Dom);	
variables.put("A_B1_D2", A_B1_D2); //including the variable in the map
//declaring variable A_B2_D1
Identifier A_B2_D1 = factory.newIdentifier("A_B2_D1");
  			BinaryDomain A_B2_D1Dom= new BinaryDomain();
A_B2_D1.setDomain(A_B2_D1Dom);	
variables.put("A_B2_D1", A_B2_D1); //including the variable in the map
//declaring variable A_B2_D2
Identifier A_B2_D2 = factory.newIdentifier("A_B2_D2");
  			BinaryDomain A_B2_D2Dom= new BinaryDomain();
A_B2_D2.setDomain(A_B2_D2Dom);	
variables.put("A_B2_D2", A_B2_D2); //including the variable in the map
//declaring variable E
Identifier E = factory.newIdentifier("E");
  			BinaryDomain EDom= new BinaryDomain();
E.setDomain(EDom);	
variables.put("E", E); //including the variable in the map
//declaring variable E_card
Identifier E_card = factory.newIdentifier("E_card");
 				RangeDomain E_cardDom= new RangeDomain(1, 8);
E_card.setDomain(E_cardDom);	
variables.put("E_card", E_card); //including the variable in the map
//declaring variable A_B1_D1_E1
Identifier A_B1_D1_E1 = factory.newIdentifier("A_B1_D1_E1");
  			BinaryDomain A_B1_D1_E1Dom= new BinaryDomain();
A_B1_D1_E1.setDomain(A_B1_D1_E1Dom);	
variables.put("A_B1_D1_E1", A_B1_D1_E1); //including the variable in the map
//declaring variable A_B1_D1_E2
Identifier A_B1_D1_E2 = factory.newIdentifier("A_B1_D1_E2");
  			BinaryDomain A_B1_D1_E2Dom= new BinaryDomain();
A_B1_D1_E2.setDomain(A_B1_D1_E2Dom);	
variables.put("A_B1_D1_E2", A_B1_D1_E2); //including the variable in the map
//declaring variable A_B1_D2_E1
Identifier A_B1_D2_E1 = factory.newIdentifier("A_B1_D2_E1");
  			BinaryDomain A_B1_D2_E1Dom= new BinaryDomain();
A_B1_D2_E1.setDomain(A_B1_D2_E1Dom);	
variables.put("A_B1_D2_E1", A_B1_D2_E1); //including the variable in the map
//declaring variable A_B1_D2_E2
Identifier A_B1_D2_E2 = factory.newIdentifier("A_B1_D2_E2");
  			BinaryDomain A_B1_D2_E2Dom= new BinaryDomain();
A_B1_D2_E2.setDomain(A_B1_D2_E2Dom);	
variables.put("A_B1_D2_E2", A_B1_D2_E2); //including the variable in the map
//declaring variable A_B2_D1_E1
Identifier A_B2_D1_E1 = factory.newIdentifier("A_B2_D1_E1");
  			BinaryDomain A_B2_D1_E1Dom= new BinaryDomain();
A_B2_D1_E1.setDomain(A_B2_D1_E1Dom);	
variables.put("A_B2_D1_E1", A_B2_D1_E1); //including the variable in the map
//declaring variable A_B2_D1_E2
Identifier A_B2_D1_E2 = factory.newIdentifier("A_B2_D1_E2");
  			BinaryDomain A_B2_D1_E2Dom= new BinaryDomain();
A_B2_D1_E2.setDomain(A_B2_D1_E2Dom);	
variables.put("A_B2_D1_E2", A_B2_D1_E2); //including the variable in the map
//declaring variable A_B2_D2_E1
Identifier A_B2_D2_E1 = factory.newIdentifier("A_B2_D2_E1");
  			BinaryDomain A_B2_D2_E1Dom= new BinaryDomain();
A_B2_D2_E1.setDomain(A_B2_D2_E1Dom);	
variables.put("A_B2_D2_E1", A_B2_D2_E1); //including the variable in the map
//declaring variable A_B2_D2_E2
Identifier A_B2_D2_E2 = factory.newIdentifier("A_B2_D2_E2");
  			BinaryDomain A_B2_D2_E2Dom= new BinaryDomain();
A_B2_D2_E2.setDomain(A_B2_D2_E2Dom);	
variables.put("A_B2_D2_E2", A_B2_D2_E2); //including the variable in the map
	}
	public void transformConstraints() {
//
//declaring constraint c0


Identifier c0_left = variables.get("A");

NumericIdentifier c0_right = getValue("1");
IntBooleanExpression c0=
factory.equals(c0_left, c0_right);
constraints.put("c0", c0);
hlclProgram.add(c0);
//
//declaring constraint ac_0


Identifier ac_0_left = variables.get("B_card");


Identifier ac_0_right_left = variables.get("A_B1");

Identifier ac_0_right_right = variables.get("A_B2");
IntNumericExpression ac_0_right=factory.sum(ac_0_right_left, ac_0_right_right);	
IntBooleanExpression ac_0=
factory.equals(ac_0_left, ac_0_right);
constraints.put("ac_0", ac_0);
hlclProgram.add(ac_0);
//
//declaring constraint ac_1


NumericIdentifier ac_1_left = getValue("1");


Identifier ac_1_right_left = variables.get("A_B1");

Identifier ac_1_right_right = variables.get("A_B2");
IntNumericExpression ac_1_right=factory.sum(ac_1_right_left, ac_1_right_right);	
IntBooleanExpression ac_1=
factory.lessOrEqualsThan(ac_1_left, ac_1_right);
constraints.put("ac_1", ac_1);
hlclProgram.add(ac_1);
//
//declaring constraint ac_2


NumericIdentifier ac_2_left = getValue("2");


Identifier ac_2_right_left = variables.get("A_B1");

Identifier ac_2_right_right = variables.get("A_B2");
IntNumericExpression ac_2_right=factory.sum(ac_2_right_left, ac_2_right_right);	
IntBooleanExpression ac_2=
factory.greaterOrEqualsThan(ac_2_left, ac_2_right);
constraints.put("ac_2", ac_2);
hlclProgram.add(ac_2);
//
//declaring constraint ac_3


Identifier ac_3_left = variables.get("B");


Identifier ac_3_right_left = variables.get("B_card");

NumericIdentifier ac_3_right_right = getValue("0");
IntBooleanExpression ac_3_right=
factory.greaterThan(ac_3_right_left, ac_3_right_right);
IntBooleanExpression ac_3=factory.doubleImplies(ac_3_left, ac_3_right);		
constraints.put("ac_3", ac_3);
hlclProgram.add(ac_3);
//
//declaring constraint ac_4


Identifier ac_4_left = variables.get("A_B1");



NumericIdentifier ac_4_right_left_left = getValue("1");


Identifier ac_4_right_left_right_left = variables.get("A_B1_D1");

Identifier ac_4_right_left_right_right = variables.get("A_B1_D2");
IntNumericExpression ac_4_right_left_right=factory.sum(ac_4_right_left_right_left, ac_4_right_left_right_right);	
IntBooleanExpression ac_4_right_left=
factory.lessOrEqualsThan(ac_4_right_left_left, ac_4_right_left_right);


NumericIdentifier ac_4_right_right_left = getValue("2");


Identifier ac_4_right_right_right_left = variables.get("A_B1_D1");

Identifier ac_4_right_right_right_right = variables.get("A_B1_D2");
IntNumericExpression ac_4_right_right_right=factory.sum(ac_4_right_right_right_left, ac_4_right_right_right_right);	
IntBooleanExpression ac_4_right_right=
factory.greaterOrEqualsThan(ac_4_right_right_left, ac_4_right_right_right);
IntBooleanExpression ac_4_right=factory.and(ac_4_right_left, ac_4_right_right);		
IntBooleanExpression ac_4=factory.doubleImplies(ac_4_left, ac_4_right);		
constraints.put("ac_4", ac_4);
hlclProgram.add(ac_4);
//
//declaring constraint ac_5


Identifier ac_5_left = variables.get("A_B2");



NumericIdentifier ac_5_right_left_left = getValue("1");


Identifier ac_5_right_left_right_left = variables.get("A_B2_D1");

Identifier ac_5_right_left_right_right = variables.get("A_B2_D2");
IntNumericExpression ac_5_right_left_right=factory.sum(ac_5_right_left_right_left, ac_5_right_left_right_right);	
IntBooleanExpression ac_5_right_left=
factory.lessOrEqualsThan(ac_5_right_left_left, ac_5_right_left_right);


NumericIdentifier ac_5_right_right_left = getValue("2");


Identifier ac_5_right_right_right_left = variables.get("A_B2_D1");

Identifier ac_5_right_right_right_right = variables.get("A_B2_D2");
IntNumericExpression ac_5_right_right_right=factory.sum(ac_5_right_right_right_left, ac_5_right_right_right_right);	
IntBooleanExpression ac_5_right_right=
factory.greaterOrEqualsThan(ac_5_right_right_left, ac_5_right_right_right);
IntBooleanExpression ac_5_right=factory.and(ac_5_right_left, ac_5_right_right);		
IntBooleanExpression ac_5=factory.doubleImplies(ac_5_left, ac_5_right);		
constraints.put("ac_5", ac_5);
hlclProgram.add(ac_5);
//
//declaring constraint ac_6


Identifier ac_6_left = variables.get("D_card");




Identifier ac_6_right_left_left_left = variables.get("A_B1_D1");

Identifier ac_6_right_left_left_right = variables.get("A_B1_D2");
IntNumericExpression ac_6_right_left_left=factory.sum(ac_6_right_left_left_left, ac_6_right_left_left_right);	

Identifier ac_6_right_left_right = variables.get("A_B2_D1");
IntNumericExpression ac_6_right_left=factory.sum(ac_6_right_left_left, ac_6_right_left_right);	

Identifier ac_6_right_right = variables.get("A_B2_D2");
IntNumericExpression ac_6_right=factory.sum(ac_6_right_left, ac_6_right_right);	
IntBooleanExpression ac_6=
factory.equals(ac_6_left, ac_6_right);
constraints.put("ac_6", ac_6);
hlclProgram.add(ac_6);
//
//declaring constraint ac_7


NumericIdentifier ac_7_left = getValue("1");




Identifier ac_7_right_left_left_left = variables.get("A_B1_D1");

Identifier ac_7_right_left_left_right = variables.get("A_B1_D2");
IntNumericExpression ac_7_right_left_left=factory.sum(ac_7_right_left_left_left, ac_7_right_left_left_right);	

Identifier ac_7_right_left_right = variables.get("A_B2_D1");
IntNumericExpression ac_7_right_left=factory.sum(ac_7_right_left_left, ac_7_right_left_right);	

Identifier ac_7_right_right = variables.get("A_B2_D2");
IntNumericExpression ac_7_right=factory.sum(ac_7_right_left, ac_7_right_right);	
IntBooleanExpression ac_7=
factory.lessOrEqualsThan(ac_7_left, ac_7_right);
constraints.put("ac_7", ac_7);
hlclProgram.add(ac_7);
//
//declaring constraint ac_8


NumericIdentifier ac_8_left = getValue("4");




Identifier ac_8_right_left_left_left = variables.get("A_B1_D1");

Identifier ac_8_right_left_left_right = variables.get("A_B1_D2");
IntNumericExpression ac_8_right_left_left=factory.sum(ac_8_right_left_left_left, ac_8_right_left_left_right);	

Identifier ac_8_right_left_right = variables.get("A_B2_D1");
IntNumericExpression ac_8_right_left=factory.sum(ac_8_right_left_left, ac_8_right_left_right);	

Identifier ac_8_right_right = variables.get("A_B2_D2");
IntNumericExpression ac_8_right=factory.sum(ac_8_right_left, ac_8_right_right);	
IntBooleanExpression ac_8=
factory.greaterOrEqualsThan(ac_8_left, ac_8_right);
constraints.put("ac_8", ac_8);
hlclProgram.add(ac_8);
//
//declaring constraint ac_9


Identifier ac_9_left = variables.get("D");


Identifier ac_9_right_left = variables.get("D_card");

NumericIdentifier ac_9_right_right = getValue("0");
IntBooleanExpression ac_9_right=
factory.greaterThan(ac_9_right_left, ac_9_right_right);
IntBooleanExpression ac_9=factory.doubleImplies(ac_9_left, ac_9_right);		
constraints.put("ac_9", ac_9);
hlclProgram.add(ac_9);
//
//declaring constraint ac_10


Identifier ac_10_left = variables.get("A_B1_D1");



NumericIdentifier ac_10_right_left_left = getValue("1");


Identifier ac_10_right_left_right_left = variables.get("A_B1_D1_E1");

Identifier ac_10_right_left_right_right = variables.get("A_B1_D1_E2");
IntNumericExpression ac_10_right_left_right=factory.sum(ac_10_right_left_right_left, ac_10_right_left_right_right);	
IntBooleanExpression ac_10_right_left=
factory.lessOrEqualsThan(ac_10_right_left_left, ac_10_right_left_right);


NumericIdentifier ac_10_right_right_left = getValue("2");


Identifier ac_10_right_right_right_left = variables.get("A_B1_D1_E1");

Identifier ac_10_right_right_right_right = variables.get("A_B1_D1_E2");
IntNumericExpression ac_10_right_right_right=factory.sum(ac_10_right_right_right_left, ac_10_right_right_right_right);	
IntBooleanExpression ac_10_right_right=
factory.greaterOrEqualsThan(ac_10_right_right_left, ac_10_right_right_right);
IntBooleanExpression ac_10_right=factory.and(ac_10_right_left, ac_10_right_right);		
IntBooleanExpression ac_10=factory.doubleImplies(ac_10_left, ac_10_right);		
constraints.put("ac_10", ac_10);
hlclProgram.add(ac_10);
//
//declaring constraint ac_11


Identifier ac_11_left = variables.get("A_B1_D2");



NumericIdentifier ac_11_right_left_left = getValue("1");


Identifier ac_11_right_left_right_left = variables.get("A_B1_D2_E1");

Identifier ac_11_right_left_right_right = variables.get("A_B1_D2_E2");
IntNumericExpression ac_11_right_left_right=factory.sum(ac_11_right_left_right_left, ac_11_right_left_right_right);	
IntBooleanExpression ac_11_right_left=
factory.lessOrEqualsThan(ac_11_right_left_left, ac_11_right_left_right);


NumericIdentifier ac_11_right_right_left = getValue("2");


Identifier ac_11_right_right_right_left = variables.get("A_B1_D2_E1");

Identifier ac_11_right_right_right_right = variables.get("A_B1_D2_E2");
IntNumericExpression ac_11_right_right_right=factory.sum(ac_11_right_right_right_left, ac_11_right_right_right_right);	
IntBooleanExpression ac_11_right_right=
factory.greaterOrEqualsThan(ac_11_right_right_left, ac_11_right_right_right);
IntBooleanExpression ac_11_right=factory.and(ac_11_right_left, ac_11_right_right);		
IntBooleanExpression ac_11=factory.doubleImplies(ac_11_left, ac_11_right);		
constraints.put("ac_11", ac_11);
hlclProgram.add(ac_11);
//
//declaring constraint ac_12


Identifier ac_12_left = variables.get("A_B2_D1");



NumericIdentifier ac_12_right_left_left = getValue("1");


Identifier ac_12_right_left_right_left = variables.get("A_B2_D1_E1");

Identifier ac_12_right_left_right_right = variables.get("A_B2_D1_E2");
IntNumericExpression ac_12_right_left_right=factory.sum(ac_12_right_left_right_left, ac_12_right_left_right_right);	
IntBooleanExpression ac_12_right_left=
factory.lessOrEqualsThan(ac_12_right_left_left, ac_12_right_left_right);


NumericIdentifier ac_12_right_right_left = getValue("2");


Identifier ac_12_right_right_right_left = variables.get("A_B2_D1_E1");

Identifier ac_12_right_right_right_right = variables.get("A_B2_D1_E2");
IntNumericExpression ac_12_right_right_right=factory.sum(ac_12_right_right_right_left, ac_12_right_right_right_right);	
IntBooleanExpression ac_12_right_right=
factory.greaterOrEqualsThan(ac_12_right_right_left, ac_12_right_right_right);
IntBooleanExpression ac_12_right=factory.and(ac_12_right_left, ac_12_right_right);		
IntBooleanExpression ac_12=factory.doubleImplies(ac_12_left, ac_12_right);		
constraints.put("ac_12", ac_12);
hlclProgram.add(ac_12);
//
//declaring constraint ac_13


Identifier ac_13_left = variables.get("A_B2_D2");



NumericIdentifier ac_13_right_left_left = getValue("1");


Identifier ac_13_right_left_right_left = variables.get("A_B2_D2_E1");

Identifier ac_13_right_left_right_right = variables.get("A_B2_D2_E2");
IntNumericExpression ac_13_right_left_right=factory.sum(ac_13_right_left_right_left, ac_13_right_left_right_right);	
IntBooleanExpression ac_13_right_left=
factory.lessOrEqualsThan(ac_13_right_left_left, ac_13_right_left_right);


NumericIdentifier ac_13_right_right_left = getValue("2");


Identifier ac_13_right_right_right_left = variables.get("A_B2_D2_E1");

Identifier ac_13_right_right_right_right = variables.get("A_B2_D2_E2");
IntNumericExpression ac_13_right_right_right=factory.sum(ac_13_right_right_right_left, ac_13_right_right_right_right);	
IntBooleanExpression ac_13_right_right=
factory.greaterOrEqualsThan(ac_13_right_right_left, ac_13_right_right_right);
IntBooleanExpression ac_13_right=factory.and(ac_13_right_left, ac_13_right_right);		
IntBooleanExpression ac_13=factory.doubleImplies(ac_13_left, ac_13_right);		
constraints.put("ac_13", ac_13);
hlclProgram.add(ac_13);
//
//declaring constraint ac_14


Identifier ac_14_left = variables.get("E_card");








Identifier ac_14_right_left_left_left_left_left_left_left = variables.get("A_B1_D1_E1");

Identifier ac_14_right_left_left_left_left_left_left_right = variables.get("A_B1_D1_E2");
IntNumericExpression ac_14_right_left_left_left_left_left_left=factory.sum(ac_14_right_left_left_left_left_left_left_left, ac_14_right_left_left_left_left_left_left_right);	

Identifier ac_14_right_left_left_left_left_left_right = variables.get("A_B1_D2_E1");
IntNumericExpression ac_14_right_left_left_left_left_left=factory.sum(ac_14_right_left_left_left_left_left_left, ac_14_right_left_left_left_left_left_right);	

Identifier ac_14_right_left_left_left_left_right = variables.get("A_B1_D2_E2");
IntNumericExpression ac_14_right_left_left_left_left=factory.sum(ac_14_right_left_left_left_left_left, ac_14_right_left_left_left_left_right);	

Identifier ac_14_right_left_left_left_right = variables.get("A_B2_D1_E1");
IntNumericExpression ac_14_right_left_left_left=factory.sum(ac_14_right_left_left_left_left, ac_14_right_left_left_left_right);	

Identifier ac_14_right_left_left_right = variables.get("A_B2_D1_E2");
IntNumericExpression ac_14_right_left_left=factory.sum(ac_14_right_left_left_left, ac_14_right_left_left_right);	

Identifier ac_14_right_left_right = variables.get("A_B2_D2_E1");
IntNumericExpression ac_14_right_left=factory.sum(ac_14_right_left_left, ac_14_right_left_right);	

Identifier ac_14_right_right = variables.get("A_B2_D2_E2");
IntNumericExpression ac_14_right=factory.sum(ac_14_right_left, ac_14_right_right);	
IntBooleanExpression ac_14=
factory.equals(ac_14_left, ac_14_right);
constraints.put("ac_14", ac_14);
hlclProgram.add(ac_14);
//
//declaring constraint ac_15


NumericIdentifier ac_15_left = getValue("1");








Identifier ac_15_right_left_left_left_left_left_left_left = variables.get("A_B1_D1_E1");

Identifier ac_15_right_left_left_left_left_left_left_right = variables.get("A_B1_D1_E2");
IntNumericExpression ac_15_right_left_left_left_left_left_left=factory.sum(ac_15_right_left_left_left_left_left_left_left, ac_15_right_left_left_left_left_left_left_right);	

Identifier ac_15_right_left_left_left_left_left_right = variables.get("A_B1_D2_E1");
IntNumericExpression ac_15_right_left_left_left_left_left=factory.sum(ac_15_right_left_left_left_left_left_left, ac_15_right_left_left_left_left_left_right);	

Identifier ac_15_right_left_left_left_left_right = variables.get("A_B1_D2_E2");
IntNumericExpression ac_15_right_left_left_left_left=factory.sum(ac_15_right_left_left_left_left_left, ac_15_right_left_left_left_left_right);	

Identifier ac_15_right_left_left_left_right = variables.get("A_B2_D1_E1");
IntNumericExpression ac_15_right_left_left_left=factory.sum(ac_15_right_left_left_left_left, ac_15_right_left_left_left_right);	

Identifier ac_15_right_left_left_right = variables.get("A_B2_D1_E2");
IntNumericExpression ac_15_right_left_left=factory.sum(ac_15_right_left_left_left, ac_15_right_left_left_right);	

Identifier ac_15_right_left_right = variables.get("A_B2_D2_E1");
IntNumericExpression ac_15_right_left=factory.sum(ac_15_right_left_left, ac_15_right_left_right);	

Identifier ac_15_right_right = variables.get("A_B2_D2_E2");
IntNumericExpression ac_15_right=factory.sum(ac_15_right_left, ac_15_right_right);	
IntBooleanExpression ac_15=
factory.lessOrEqualsThan(ac_15_left, ac_15_right);
constraints.put("ac_15", ac_15);
hlclProgram.add(ac_15);
//
//declaring constraint ac_16


NumericIdentifier ac_16_left = getValue("8");








Identifier ac_16_right_left_left_left_left_left_left_left = variables.get("A_B1_D1_E1");

Identifier ac_16_right_left_left_left_left_left_left_right = variables.get("A_B1_D1_E2");
IntNumericExpression ac_16_right_left_left_left_left_left_left=factory.sum(ac_16_right_left_left_left_left_left_left_left, ac_16_right_left_left_left_left_left_left_right);	

Identifier ac_16_right_left_left_left_left_left_right = variables.get("A_B1_D2_E1");
IntNumericExpression ac_16_right_left_left_left_left_left=factory.sum(ac_16_right_left_left_left_left_left_left, ac_16_right_left_left_left_left_left_right);	

Identifier ac_16_right_left_left_left_left_right = variables.get("A_B1_D2_E2");
IntNumericExpression ac_16_right_left_left_left_left=factory.sum(ac_16_right_left_left_left_left_left, ac_16_right_left_left_left_left_right);	

Identifier ac_16_right_left_left_left_right = variables.get("A_B2_D1_E1");
IntNumericExpression ac_16_right_left_left_left=factory.sum(ac_16_right_left_left_left_left, ac_16_right_left_left_left_right);	

Identifier ac_16_right_left_left_right = variables.get("A_B2_D1_E2");
IntNumericExpression ac_16_right_left_left=factory.sum(ac_16_right_left_left_left, ac_16_right_left_left_right);	

Identifier ac_16_right_left_right = variables.get("A_B2_D2_E1");
IntNumericExpression ac_16_right_left=factory.sum(ac_16_right_left_left, ac_16_right_left_right);	

Identifier ac_16_right_right = variables.get("A_B2_D2_E2");
IntNumericExpression ac_16_right=factory.sum(ac_16_right_left, ac_16_right_right);	
IntBooleanExpression ac_16=
factory.greaterOrEqualsThan(ac_16_left, ac_16_right);
constraints.put("ac_16", ac_16);
hlclProgram.add(ac_16);
//
//declaring constraint ac_17


Identifier ac_17_left = variables.get("E");


Identifier ac_17_right_left = variables.get("E_card");

NumericIdentifier ac_17_right_right = getValue("0");
IntBooleanExpression ac_17_right=
factory.greaterThan(ac_17_right_left, ac_17_right_right);
IntBooleanExpression ac_17=factory.doubleImplies(ac_17_left, ac_17_right);		
constraints.put("ac_17", ac_17);
hlclProgram.add(ac_17);
	}
	public boolean evaluateSatisfiability(){
		// the output
		boolean evaluation= false;
		// //to transform the hllcl program into a prolog  file, 
		// //these lines are commented because they are useful for debugging 
		Hlcl2SWIProlog swiPrologTransformer = new Hlcl2SWIProlog(); 
		prologProgram = swiPrologTransformer.transform(hlclProgram);
				
		// an instance of the solver for Swiprolog 
		swiSolver= new SWIPrologSolver();
		swiSolver.setHLCLProgram(hlclProgram); //passing the hlcl program to the solver
		swiSolver.solve(); // This methhod prepares the solver 
		List<SolverSolution> solutions = swiSolver.getAllSolutions(); // Consulting if the solver has one solution
			evaluation= solutions.size()>0;
			for (SolverSolution solverSolution : solutions) {
				System.out.println(solverSolution.toString());
			}	return evaluation;
	}
	/** 
	* To obtain the NumericIdentifier representation of a value 
	* @param id the string with the value 
	* @return the NumericIdentifier 
	*/
	public NumericIdentifier getValue(String id) {	NumericIdentifier value= numbers.get(id); 
	 	if (value==null) { 
	 		if (id.equals("selected")) { 
	 			value= numbers.get("1"); 
	 		} 
	 		else if(id.equals("unselected")) {
				value= numbers.get("0"); 
			} 
			else { 
				value= factory.number(Integer.parseInt(id)); 
				numbers.put(id, value);
			}
	 	} 
	 	return value; 
	 } 
		public String getModelName() {
			return modelName;
		}
		public void setModelName(String modelName) {
			this.modelName = modelName;
		}
		public HlclFactory getFactory() {
			return factory;
		}
		public void setFactory(HlclFactory factory) {
			this.factory = factory;
		}
		public HlclProgram getHlclProgram() {
			return hlclProgram;
		}
		public void setHlclProgram(HlclProgram hlclProgram) {
			this.hlclProgram = hlclProgram;
		}
} 	