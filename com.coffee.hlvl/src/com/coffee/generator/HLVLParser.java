/*
 * generated by Xtext 2.12.0
 */
package com.coffee.generator;

import com.coffee.HlvlStandaloneSetup;
import com.coffee.hlvl.Model;
import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

import java.io.IOException;
import java.io.StringReader;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.URIConverter;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.emf.ecore.xmi.XMIResource;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;

public class HLVLParser {

	
	public static void main(String[] args) throws IOException {
		if (args.length == 0) {
			
			System.err.println("Aborting: no path to EMF resource provided!");
			return;
		}
		
		HLVLParser.runGenerator(args[0]);
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private GeneratorDelegate generator;

	@Inject
	private JavaIoFileSystemAccess fileAccess;

	public static String runGenerator(String string) throws IOException {
		Injector injector = new HlvlStandaloneSetup().createInjectorAndDoEMFRegistration();

		final ResourceSet resourceSet = injector.getInstance(XtextResourceSet.class);
		resourceSet.getLoadOptions().put(XtextResource.OPTION_RESOLVE_ALL, Boolean.TRUE);

		final IResourceValidator validator = injector.getInstance(IResourceValidator.class);
		final Resource resource = resourceSet.createResource(URI.createURI("fake.hlvl"));
		final URIConverter.ReadableInputStream stream = new URIConverter.ReadableInputStream(new StringReader(string),
				"UTF-8");
		resource.load(stream, Collections.EMPTY_MAP);

		// Validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			return list.stream().map(Issue::toString).collect(Collectors.joining("\n"));
		}

		Model model = ((Model) resource.getContents().get(0));
		String modelName = model.getName();
		IHLVLParser parser = ParserFactory.getParser(Dialect.BASIC_BOOL, modelName);
		String result = parser.parseModel(model).toString();

		return result;
	}
}
